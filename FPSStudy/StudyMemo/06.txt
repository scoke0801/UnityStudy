[ 유한 상태 머신( FSM, Finite State Machine ) ]
- 적 캐릭터가 알아서 주변 환경에 적응하거나 들어오는 반응에 적절하게 반작용 하도록 구현한 것.
- 단점: 상태가 많아질수록 상태와 상태간의 연결이 복잡해지고 코드의 확장과 유지보수가 어려워진다.
- 보완: 상태를 모듈화 하고 계층적으로 분류하는 계층적 유한 상태 머신 or 행동 트리 방식.

[ 메카님 ]
- 애니메이션 미들웨어 엔진의 일종. 기존의 레거시 애니메이션에서는 처리하기 어려웠던 유연한 애니메이션을 처리할 수 있다.
- 인체형(Humanoid)모델의 필수 본 구조와 일치하면 다른 모델의 애니메이션이나 모션 캡처 애니메이션을 바로 적용 가능.
- Node기반의 Visual Editor( WYSIWYG )
- 세밀한 애니메이션 처리.
- 리타게팅을 통한 애니메이션적용.
- 애니메이터 뷰 자체가 FSM의 설계도..

[ 애니메이션 타입 ]
- Model - Inspector - Rig 탭에서 설정 가능.
- 레거시 : 유니티 4.0이전에서 사용하던 애니메이션 시스템
- 제너릭 : 메카님 애니메이션( 비인간형 모델 ), 리타게팅 불가.
- 휴머노이드 : 메카님 애니메이션( 인간형 모델, 2족 보행 모델 ), 리타게팅 가능.

3D모델의 애니메이션 타입을 메카님으로 설정하면, Animator 컴포넌트가 자동으로 추가.
- 앞선 player 모델은 Legacy -> Animation 컴포넌트가 추가.
- 추가된 컴포넌트를 기준으로 어떤 애니메이션 타입의 모델인지 알 수 있어야 함.

[ Animator 속성 ]
- Controller : 애니메이션 클립 간의 연결 정보를 저장한 Animation Controller를 연결.
- Avatar : 해당 모델의 본 매핑 정보를 저장한 Avatar에셋을 연결
- Apply Root motion : 애니메이션 클리베 저장된 위치와 회전값에 대한 적용 여부.
- Update Mode: 애니메이션ㅇ의 갱신과 TimeScale의 적용에 대한 설정.
--- Normal : Update주기와 동기화, TimeScale영향을 받음
--- Aniamte Physics : FixedUpdate와 동기화, Rigidbody와 상호작용을 할 때 사용.
--- Unscaled Time : Update주기와 동기화, 애니메이션 속도는 scaleTime에 영향을 받지않음.
- Culling mode : 애니메이션 클립의 동작 정지에 대한 설정.
--- Always Animation: 항상 실행. 렌더링을 하지않아도 계속 동작( 카메라에 보이지 않아도 )
--- Cull Update Transform : 렌더링을 하지 않을 때 Transform, IK, Retarget 기능을 정지.
--- Cull Completely: 렝더링을 하지 않으면 애니메이션의 모든 기능을 정지한다.

[ 애니메이터 컨트롤러 ]
- 메카님으로 변환한 모델에 애니메이션 기능을 부여하려면 애니메이터 컨트롤러가 필요.
- 애니메이터 컨트롤러 : 애니메이션을 적용하고 특정 조건에 따라 애니메이션 상태로 전이하는 규칙을 설계할 수 있는 인터페이스를 제공

Has Exit Time : 체크되어있으면, 조건을 만족했을 때 기존 애니메이션을 다 진행하고 나서 전이함.

static옵션
- 유니티 엔진에 고정된 게임오브젝트임을 알려주는 옵션으로, 필요한 옵션만 선택하자.
- Ex) 드럼통의 static옵션을 모두 선택하면, 폭발 시 고정되어 날라가지 않는다.

[ 네비게이션 ]
- NavMeshAgent: 내비메시 데이터를 기반으로 목적지까지 최단 거리를 계산해 이동하는 역할을 함.
- 장애물과 다른 NPC간의 충돌을 회피하는 기능 제공
- 최단거리 계산 시 A* 알고리즘을 사용.

[ NavMeshAgent 속성]
- AgentType : 장애무을 회피하기 위한 회전 반경 및 넘어갈 수 있는 계단의 높이.
		경사로의 등판 각도의 정보를 정의한 것을 에이전트라고한다.
		기본 값은 Humanoid로 지정되어 있으며, 개발자가 추가로 정의해 지정할 수 있다.
- Base Offset : 실린더 형태로 표현된 NavMeshAgent는 베이크된 내비메시 표면에 붙어서 이동한다.
		이때 캐릭터가 바탁에서 뜬 상태로 이동하는 것처럼 보이는 것을 수정하기 위해
		NavMeshAgent의 높낮이를 조절하는 기능이다.
- Speed : 최대 이동 속도( 초당 월드 단위 )
- Angular Speed: 최대 회전 속도( 초당 각도 )
- Acceleration : 최대 가속
- Stopping Distance : 목표 지점에 가까워졌을 때 정지하는 근접 거리.
- Auto Braking: 목표지점에 가까워졌을 때 속도를 줄이는 기능으로, 순찰과 같이 여러 포인트를 부드럽게 이동하기 위해서는 이 기능을 비활성화 해야한다.
- Radius : 에이전트의 반경, 장애물을 크게 돌아갈것인지 짧게 돌아갈것인지를 결정. 다른 에이전트와의 충돌을 계산하기 위해 사용
- Height: 에이전트가 머리 위에 있는 장애물을 지나갈때의 높이. 수치가 클 수록 넘어갈 수 있는 계단의 스텝도 커진다.
- Quality : 장애물을 회피할 대의 품질 수준. 낮을수록 CPU 부하를 낮춘다.
- Priority : 에이전트 간의 회피 우선순위. 자신보다 낮은 에이전트는 회피 대상에저 제외. 0 ~ 99 사이의 값. 낮은 수가 우선순위가 높다.
- Auto Traverse off mesh Link : 분리된 메시간에 자동으로 링크를 생성하는 옵션
		Off Mesh Link 기능으로 직접 생성하는 경우 해당 속성은 비활성화.
- Auto Repath: 이동할 경로가 유효하지않을 때 경로를 다시 탐색.
- Area Mask : 해당 값을 지정 후 bake하면 특정 영역별로 이동을 제한핤 ㅜ 있다.
		특히 런타임에서 비트 마스크를 통해 조작할 수 있다.


[ Resources 폴더 ]
- 스크립트에서 프리팹 또는 에셋을 직접 로드하려면 해당 프리팹이나 에셋이 Resources폴더 하위에 있어야 한다.
- Resources 폴더에 있는 모든 에셋은 런 타임에서 직접 불러와 사용할 수 있는 특징이 있지만, 빌드할 때 실행 파일에 모두 포함된다.
		따라서 게임에서 사용하지 않는 리소스가 있어서는 안된다.
- Resources 폴더에서 에셋의 타입에 따라 서브 폴더로 분류한다면 로드할 에셋명에  폴더까지 지정해야 한다.
		Resources/Prefabs/
		Resources/Sounds/
		
[ 본 구조의 최적화 ]
- 보통의 인체형 모델은 애니메이션을 수행하기 위해 Rig( 본 구조, 뼈대 )가 설정돼 있다.
- 하나의 3D모델이 가진 많은 Transform 컴포넌트의 이동 및 회전 처러니느 런타임 시 내부적으로 다양한 연산처리를 하므로 최적화가 필요.
- 실제 게임에서 사용되는 관절만 남겨두고 다른 것은 노출되지 않게 설정하면 속도 향상 + 하이라키뷰의 간결화로 인한 능률 상승.
- 원본 모델 선택 - Rig 탭 - Optimize Game Objects - Extra Transform to Expose 

[ 이벤트 구동 ]
- 이벤트: 특정한 조건을 만족하면 자동으로 알려주는 메시지.
- for, foreach 구문을 사용해 순차적으로 처리하는 방식보다 메모리 사용 측면이나 구동 속도 측면에서 효율적이다.
- 델리게이트 : 함수를 참조하는 변수. C++의 함수 포인터와 같은 의미.
		접근제한자 delegate 반환타입 델레게이트명( 매개변수 ... )